import{S as _c,i as Ec,s as Ic,k as o,a as s,w as Sc,q as t,I as Tc,l as r,h as i,c as n,x as kc,m as l,r as a,n as h,J as j,G as e,b as $n,y as Gc,B as Pc,f as Lc,t as Cc,z as Ac}from"../../../../chunks/index-a8a08db8.js";import{T as Rc}from"../../../../chunks/TopSofC-31e5beff.js";/* empty css                                */const Dc=""+new URL("../../../../assets/osm-college-bf243ca2.png",import.meta.url).href,Oc=""+new URL("../../../../assets/dem-toronto-c547fdc3.png",import.meta.url).href,Mc=""+new URL("../../../../assets/gis-layers-479f3a99.png",import.meta.url).href,zc=""+new URL("../../../../assets/qgis-blank-c49863c8.png",import.meta.url).href,Wc=""+new URL("../../../../assets/qgis-layers1-2075521d.png",import.meta.url).href,qc=""+new URL("../../../../assets/qgis-centre-db6f5d95.png",import.meta.url).href,xc=""+new URL("../../../../assets/qgis-bikeshare-2fd27b69.png",import.meta.url).href,jc=""+new URL("../../../../assets/qgis-railct-8ad297f5.png",import.meta.url).href,Uc=""+new URL("../../../../assets/qgis-choropleth-81a06853.png",import.meta.url).href,Qc=""+new URL("../../../../assets/qgis-buffer-9fdd946a.png",import.meta.url).href,Nc=""+new URL("../../../../assets/qgis-bufferselect-b78dff64.png",import.meta.url).href;function Bc(wc){let oe,ce,we,_e,Ee,Ie,Se,lo,pe,so,w,M,dt,bo,wo,ct,_o,Eo,pt,Io,So,ft,To,ko,S,ut,Go,Po,gt,Lo,Co,T,mt,Ao,Ro,vt,Do,Oo,yt,Mo,zo,bt,Wo,qo,wt,xo,jo,_t,Uo,Qo,fe,No,Te,Bo,Ho,Vo,d,Et,Fo,Jo,It,Yo,$o,re,St,Ko,Xo,Tt,Zo,er,kt,tr,ar,Gt,or,rr,Pt,ir,lr,Y,sr,Lt,nr,hr,Ct,dr,cr,pr,At,fr,ur,Rt,gr,mr,ue,vr,ke,yr,br,wr,Ge,Kn,_r,ie,Pe,Er,Ir,Le,Sr,Tr,kr,Dt,Gr,Pr,Ot,Lr,Cr,Mt,Ar,Rr,Ce,Xn,Dr,g,zt,Or,Mr,Wt,zr,Wr,ge,Zn,qr,qt,xr,jr,xt,Ur,Qr,jt,Nr,Br,le,Ut,Hr,Vr,Qt,Fr,Jr,Nt,Yr,$r,k,Bt,Kr,Xr,Ht,Zr,ei,Vt,ti,ai,Ft,oi,ri,Jt,ii,li,Yt,si,ni,se,$t,hi,di,Kt,ci,pi,Xt,fi,ui,c,Zt,gi,mi,ea,vi,yi,ta,bi,wi,Ae,eh,_i,aa,Ei,Ii,x,Re,De,Si,Ti,ki,Oe,Me,Gi,Pi,Li,z,ze,Ci,Ai,oa,Ri,Di,We,Oi,Mi,qe,zi,Wi,qi,xe,je,xi,ji,Ui,I,Qi,ra,Ni,Bi,ia,Hi,Vi,la,Fi,Ji,sa,Yi,$i,na,Ki,Xi,Zi,$,el,ha,tl,al,da,ol,rl,il,ca,ll,sl,Ue,th,nl,K,hl,pa,dl,cl,fa,pl,fl,ul,W,gl,ua,ml,vl,ga,yl,bl,ma,wl,_l,va,El,Il,L,Sl,ya,Tl,kl,ba,Gl,Pl,wa,Ll,Cl,_a,Al,Rl,Dl,Qe,ah,Ol,C,Ml,Ea,zl,Wl,Ia,ql,xl,Sa,jl,Ul,Ta,Ql,Nl,Bl,Ne,oh,Hl,m,ka,Vl,Fl,Ga,Jl,Yl,me,$l,Be,Kl,Xl,Zl,X,es,He,ts,as,Ve,os,rs,is,ve,ls,Pa,ss,ns,hs,Fe,rh,ds,E,cs,La,ps,fs,Ca,us,gs,Aa,ms,vs,Ra,ys,bs,Da,ws,_s,Oa,Es,Is,Ss,ye,Ts,Je,ks,Gs,Ps,be,Ls,Ma,Cs,As,Rs,za,Ds,Os,Ye,ih,Ms,Z,zs,Wa,Ws,qs,qa,xs,js,Us,u,xa,Qs,Ns,ja,Bs,Hs,Ua,Vs,Fs,ee,$e,Ke,Js,Ys,$s,Xe,Ze,Ks,Xs,Zs,ne,et,en,tn,tt,an,on,rn,Qa,ln,sn,Na,nn,hn,A,dn,Ba,cn,pn,Ha,fn,un,Va,gn,mn,Fa,vn,yn,bn,Ja,wn,_n,R,En,Ya,In,Sn,$a,Tn,kn,Ka,Gn,Pn,Xa,Ln,Cn,An,at,lh,Rn,Za,Dn,On,D,Mn,eo,zn,Wn,to,qn,xn,ao,jn,Un,oo,Qn,Nn,Bn,ot,sh,no;return pe=new Rc({}),{c(){oe=o("link"),ce=o("link"),we=o("link"),_e=o("link"),Ee=o("meta"),Ie=o("meta"),Se=o("meta"),lo=s(),Sc(pe.$$.fragment),so=s(),w=o("main"),M=o("div"),dt=o("h1"),bo=t("(Q)GIS WORKSHOP"),wo=s(),ct=o("p"),_o=t("For MUI2000"),Eo=s(),pt=o("p"),Io=t("By Jeff Allen"),So=s(),ft=o("p"),To=t("On January 23 & 30, 2023"),ko=s(),S=o("div"),ut=o("p"),Go=t("We use Geographic Information Systems (GIS) to analyze, manipulate, and visualize spatial information on a computer."),Po=s(),gt=o("p"),Lo=t("Why is GIS useful?"),Co=s(),T=o("ul"),mt=o("li"),Ao=t("visualize spatial data"),Ro=s(),vt=o("li"),Do=t("explore spatial patterns and relationships"),Oo=s(),yt=o("li"),Mo=t("make pretty and useful maps"),zo=s(),bt=o("li"),Wo=t('generate new data, either "by hand" or via spatial relationships from other data (e.g. through spatial queries)'),qo=s(),wt=o("li"),xo=t("perform spatial analysis (i.e. statistical methods applied to spatial data)"),jo=s(),_t=o("p"),Uo=t("GIS is often thought of as more than just a tool or piece of software. It can refer to all aspects of managing and analyzing digital spatially referenced data."),Qo=s(),fe=o("p"),No=t("The following provides a brief overview of GIS followed by two short tutorials for getting started with GIS, using "),Te=o("a"),Bo=t("QGIS"),Ho=t(", a free and open source desktop GIS software. The first tutorial uses data from the City of Toronto's Open Data portal. The second analyzes demographic data from the Canadian census as well as public transit data for Toronto"),Vo=s(),d=o("div"),Et=o("h2"),Fo=t("Spatial Data"),Jo=s(),It=o("p"),Yo=t("A spatial dataset is a combination of..."),$o=s(),re=o("ul"),St=o("li"),Ko=t("attribute data (the what)"),Xo=s(),Tt=o("li"),Zo=t("location data and spatial dimensions (the where)"),er=s(),kt=o("p"),tr=t("Spatial data, this combination of attribute and location data, can be organized and represented in a number of different formats."),ar=s(),Gt=o("p"),or=t("For example, a city can be represented on a map via a single point with a label (e.g. based on latitude and longitude coordinates). Or a city can be represented as a polygon, based on on it's administrative boundary"),rr=s(),Pt=o("p"),ir=t("Importantly, there are always uncertainty about the level of accuracy, precision, and resolution of spatial data. Spatial data are representations of reality, and thus have some loss of information when used for visualization and analysis. Any analysis can only be as good as the available data."),lr=s(),Y=o("p"),sr=t("The two most common forms of spatial data are "),Lt=o("b"),nr=t("vector"),hr=t(" data and "),Ct=o("b"),dr=t("raster"),cr=t(" data."),pr=s(),At=o("h3"),fr=t("Vector Data"),ur=s(),Rt=o("p"),gr=t("Vector data uses geographic coordinates, or a series of coordinates, to create points, lines, and polygons representing real-world features."),mr=s(),ue=o("p"),vr=t("e.g. in the map below (a screenshot of "),ke=o("a"),yr=t("OpenStreetMap"),br=t(") lines are used to represent roads and rail, points for retail, polygons for parks and buildings, etc."),wr=s(),Ge=o("img"),_r=s(),ie=o("p"),Pe=o("a"),Er=t("GeoJSON"),Ir=t(" and the "),Le=o("a"),Sr=t("Shapefile"),Tr=t(" are probably the two most common vector data formats."),kr=s(),Dt=o("h3"),Gr=t("Raster Data"),Pr=s(),Ot=o("p"),Lr=t("Raster data represents space as a continuous grid with equal cell sizes. Each cell contains a value pertaining to the type of feature it represents. These values can be quantitative (e.g. elevation) or categorical (e.g. type of land use). Common examples of raster data include digital elevation models (DEMs), satellite imagery, and scanned images (e.g. historical maps)."),Cr=s(),Mt=o("p"),Ar=t("e.g. the map below shows a DEM for Toronto at two different scales."),Rr=s(),Ce=o("img"),Dr=s(),g=o("div"),zt=o("h2"),Or=t("GIS"),Mr=s(),Wt=o("p"),zr=t("The power of GIS software and tools is the ability to work with data stored in different layers (e.g. a layer for roads, another for buildings, and so on) in conjunction with each other. These layers can be visualized and analyzed relative to each other based on their spatial relationships."),Wr=s(),ge=o("img"),qr=s(),qt=o("p"),xr=t("GIS software usually links to data stored elsewhere on a computer, rather than in a project file. If the source location of the data (i.e. which folder it's in) changes, then this will have to be updated in the GIS project. If data are edited in GIS, it will update the data in its source location."),jr=s(),xt=o("h3"),Ur=t("Common Tools & Software"),Qr=s(),jt=o("p"),Nr=t("Desktop GIS software"),Br=s(),le=o("ul"),Ut=o("li"),Hr=t("QGIS (free and open source, can do most tasks, popular in tech and academia and non-profits)"),Vr=s(),Qt=o("li"),Fr=t("ArcGIS (proprietary, can do most tasks, used by big organizations)"),Jr=s(),Nt=o("p"),Yr=t("Web-based GIS and mapping"),$r=s(),k=o("ul"),Bt=o("li"),Kr=t("MapBox (commercial, free basic accounts)"),Xr=s(),Ht=o("li"),Zr=t("CARTO (commercial)"),ei=s(),Vt=o("li"),ti=t("ArcGIS Online (commercial)"),ai=s(),Ft=o("li"),oi=t("D3 (free, steeper learning curve)"),ri=s(),Jt=o("li"),ii=t("Observable (free, steeper learning curve)"),li=s(),Yt=o("p"),si=t("GIS & Spatial analysis using code"),ni=s(),se=o("ul"),$t=o("li"),hi=t("Python, R (for processing data, statistical analysis, making simple maps)"),di=s(),Kt=o("li"),ci=t("PostGIS (spatial databases and queries)"),pi=s(),Xt=o("p"),fi=t("Many more!"),ui=s(),c=o("div"),Zt=o("h2"),gi=t("Tutorial (1)"),mi=s(),ea=o("h3"),vi=t("Loading, Querying, and Visualizing Data"),yi=s(),ta=o("p"),bi=t('First open up QGIS with a blank project. The top bars are various functions/tools. The "Browser" allows for navigating and loading datasets. The "Layers" panel will populate with each dataset that is added to the project. And the big blank square is where your map data will be visualized.'),wi=s(),Ae=o("img"),_i=s(),aa=o("p"),Ei=t("Let's begin by grabbing data from the City of Toronto's Open Data portal and loading it into QGIS. This is the data we'll be looking at:"),Ii=s(),x=o("ul"),Re=o("li"),De=o("a"),Si=t("Business Improvement Areas (BIA)"),Ti=t("."),ki=s(),Oe=o("li"),Me=o("a"),Gi=t("Street Centrelines"),Pi=t("."),Li=s(),z=o("li"),ze=o("a"),Ci=t("Bike Share Stations"),Ai=t('. This data are a "live" '),oa=o("code"),Ri=t("json"),Di=t(" feed, I've scraped it with this "),We=o("a"),Oi=t("script"),Mi=t(", the result can be downloaded from "),qe=o("a"),zi=t("here"),Wi=t("."),qi=s(),xe=o("li"),je=o("a"),xi=t("Aerial Imagery"),ji=t(". We'll be adding the most recent imagery layer."),Ui=s(),I=o("p"),Qi=t("Let's start by loading in the aerial imagery as a base layer. This is a raster dataset (each cell/pixel has a colour value) stored on the City's server. It can be loaded into QGIS by right-clicking on "),ra=o("i"),Ni=t("WMS/WMTS"),Bi=t(" layer in the browser panel and adding a "),ia=o("i"),Hi=t("New Connection"),Vi=t(" or by going to "),la=o("i"),Fi=t("Layer->Data Source Manager"),Ji=t(" and navigating to "),sa=o("i"),Yi=t("WMS/WMTS"),$i=t(". Once there, add in this URL "),na=o("code"),Ki=t("https://gis.toronto.ca/arcgis/rest/services/basemap/cot_ortho/MapServer/WMTS"),Xi=t(" and provide a descriptive name for the layer."),Zi=s(),$=o("p"),el=t("Now let's add BIA and Centreline data. Download these from the links provided above. They can be added into QGIS either by dragging and dropping them from your file manager onto the map or layers panel. Or they can be added by "),ha=o("i"),tl=t("Layer->Data Source Manager"),al=t(" and navigating to "),da=o("i"),ol=t('Vector"'),rl=t("."),il=s(),ca=o("p"),ll=t("Once added, your map should look something like this:"),sl=s(),Ue=o("img"),nl=s(),K=o("p"),hl=t("The layers can be toggled on and off. They can also be dragged into different orders, the top layer on the panel will always be the layer that is shown on top on the map. Right-clicking on the layer, going to "),pa=o("i"),dl=t("Properties"),cl=t(", then "),fa=o("i"),pl=t("Symbology"),fl=t(". In the image above, I changed the colours of the two vector layers, as well as the stroke-width of the Centreline layer."),ul=s(),W=o("p"),gl=t("Let's explore how we can select and filter data. We'll use the Centreline layer as an example. Right-clicking they layer allows us to view it's attribute table. There is a column in here called "),ua=o("code"),ml=t("FEATURE_00"),vl=t(" which indicates the type of feature. Right-click and open up the "),ga=o("i"),yl=t("Properties"),bl=t(" of the layer, then click "),ma=o("i"),wl=t("Source"),_l=t(", and play with filtering the data. e.g. this is a query for filtering to only show laneways "),va=o("code"),El=t(`"FEATURE_00" = 'Laneway'`),Il=s(),L=o("p"),Sl=t("We can also visualize data based on values in the attribute table. In the CentreLine "),ya=o("i"),Tl=t("Properties"),kl=t(", go to "),ba=o("i"),Gl=t("Symbology"),Pl=t(", then at the top, select "),wa=o("i"),Ll=t("Categorized"),Cl=t(". Try selecting "),_a=o("i"),Al=t("FEATURE_00"),Rl=t(" again. We can now quickly visualize where different features are on the map! Each category can also be turned off and on in the layers panel as well."),Dl=s(),Qe=o("img"),Ol=s(),C=o("p"),Ml=t("Now let's learn how to visualize data based on numeric data. We can use the bike share station data for this. Download and load this dataset into QGIS. Then go to it's "),Ea=o("i"),zl=t("Properties"),Wl=t(", "),Ia=o("i"),ql=t("Symbology"),xl=t(", then at the top, select "),Sa=o("i"),jl=t("Graduated"),Ul=t(". In this menu, we can color the points based on a numeric value in a column. Let's colour by the "),Ta=o("code"),Ql=t("capacity"),Nl=t(" column. Notice the options available for classifying data (number of bins, whether to use quantiles or equal intervals, etc.). Different classification schemes can highlight or hide different spatial patterns."),Bl=s(),Ne=o("img"),Hl=s(),m=o("div"),ka=o("h2"),Vl=t("Tutorial (2)"),Fl=s(),Ga=o("h3"),Jl=t("Table Joins and Choropleths"),Yl=s(),me=o("p"),$l=t("Start up a new QGIS project and add in the data downloaded from "),Be=o("a"),Kl=t("here"),Xl=t("."),Zl=s(),X=o("p"),es=t("First, let's look at data. We have a polygon layer which represents census tracts. These data are created by Statistics Canada to share aggregated for the Canadian census. They approximately correspond to neighbourhoods. Census tract boundary data were originally downloaded from "),He=o("a"),ts=t("here"),as=t(", while attribute data were downloaded from "),Ve=o("a"),os=t("here"),rs=t("."),is=s(),ve=o("p"),ls=t("We also have a line layer representing major transit lines in Toronto (originally sourced from Metrolinx). We can categorize line data by "),Pa=o("code"),ss=t("status"),ns=t(", using different colours or line types to display whether the transit route is existing or under construction. The screenshot below shows the result. (Also note how the map has been rotated 17.7 degrees, to horizontally align some of the features and reduce empty white space)."),hs=s(),Fe=o("img"),ds=s(),E=o("p"),cs=t("Also included is a "),La=o("code"),ps=t(".csv"),fs=t(" table which contains data linked to the unique identifier, "),Ca=o("code"),us=t("ctuid"),gs=t(", of each census tract. We can use the "),Aa=o("code"),ms=t("ctuid"),vs=t(" to join this tabular data to the spatial boundaries of dissemination areas. Do so by, first adding the table as a layer into QGIS. Then open up the "),Ra=o("i"),ys=t("Properties"),bs=t(" of the dissemination area boundary, and go to "),Da=o("i"),ws=t("Joins"),_s=t(". Add a new join, using "),Oa=o("code"),Es=t("ctuid"),Is=t(" as the source and target fields. Once complete, we can open up the attribute table and see these additional columns."),Ss=s(),ye=o("p"),Ts=t("We can now visualize these polygons as a "),Je=o("a"),ks=t("choropleth map"),Gs=t(" (maps where polygons are shaded by numeric attribute values). Similar to the previous tutorial, open up the layer properties, go to symbology, and style based on graduated symbols.  It's often preferred to visualize a choropleth as a rate or a density (in terms of people per area) in order not to exaggerate counts in larger areas."),Ps=s(),be=o("p"),Ls=t("(Note that a numeric column might be imported as a string. If this is the case, to convert to a number to visualize, click on the epsilon on the top-right, and use the "),Ma=o("code"),Cs=t("to_real()"),As=t(" function to convert to a numeric value)."),Rs=s(),za=o("p"),Ds=t("For example, the following shows a choropleth map of the percent of people who live in low-income households by neighbourhood relative to major transit lines."),Os=s(),Ye=o("img"),Ms=s(),Z=o("p"),zs=t("This map was created by going to "),Wa=o("i"),Ws=t("Project"),qs=t(", selecting "),qa=o("i"),xs=t("New Print Layout"),js=t(", and then adding in a map view, legend, and scale bar to the black page"),Us=s(),u=o("div"),xa=o("h2"),Qs=t("Tutorial (3)"),Ns=s(),ja=o("h3"),Bs=t("Geoprocessing"),Hs=s(),Ua=o("p"),Vs=t("Next, we're going to learn a few commonly used geoprocessing tasks, using the following data:"),Fs=s(),ee=o("ul"),$e=o("li"),Ke=o("a"),Js=t("Street Centrelines"),Ys=t(" (same as in tutorial 1)."),$s=s(),Xe=o("li"),Ze=o("a"),Ks=t("Public Libraries"),Xs=t("."),Zs=s(),ne=o("li"),et=o("a"),en=t("Apartment Buildings"),tn=t(" (originally geocoded from the City's apartment building registration and evaluation data on "),tt=o("a"),an=t("Open Data Toronto"),on=t(")."),rn=s(),Qa=o("h4"),ln=t("Projections and re-projecting data"),sn=s(),Na=o("p"),nn=t("All spatial data include location data, typically in the form of coordinates. A Coordinate Reference System (CRS) is a framework/schema for referencing where features are on the earth's surface. CRSs can have different units as well (e.g. degrees, metres, etc.). When working with urban data, we often want to have data in a CRS that does not distort shapes and has intuitive units (e.g. metres rather than degrees)."),hn=s(),A=o("p"),dn=t("To re-project and change the CRS of a vector layer, go to "),Ba=o("i"),cn=t("Vector"),pn=t(", "),Ha=o("i"),fn=t("Data Management Tools"),un=t(", then click "),Va=o("i"),gn=t("Reproject Layer"),mn=t(". Try converting the public libraries dataset into "),Fa=o("code"),vn=t("NAD83 / UTM zone 17N - EPSG:26917"),yn=t(". This is a commonly used CRS for the Toronto region with units in metres."),bn=s(),Ja=o("h4"),wn=t("Buffers"),_n=s(),R=o("p"),En=t("Using our reprojected layer, try creating 1km buffers around the location of public libraries. At the top of the QGIS menu, go to "),Ya=o("i"),In=t("Vector"),Sn=t(", "),$a=o("i"),Tn=t("Geoprocessing Tools"),kn=t(", then click "),Ka=o("i"),Gn=t("Buffer"),Pn=t(". Select the public libraries as the input layer, and "),Xa=o("code"),Ln=t("1000"),Cn=t(" metres as the distance. We can quickly see where people have easy access to public libraries in the city."),An=s(),at=o("img"),Rn=s(),Za=o("h4"),Dn=t("Select by Location"),On=s(),D=o("p"),Mn=t("This can become more useful when we compare it to other layers. Let's try to find the public housing apartment buildings in Toronto that are not within 1km to a public library. We can do this first by filtering the apartment buildings dataset by their property type "),eo=o("code"),zn=t(`"A_PROPERTY_TYPE"='SOCIAL HOUSING' OR "A_PROPERTY_TYPE"='TCHC'`),Wn=t(". Then go to "),to=o("i"),qn=t("Vector"),xn=t(", "),ao=o("i"),jn=t("Research Tools"),Un=t(", then click "),oo=o("i"),Qn=t("Select by Location"),Nn=t(". Here we can select the apartments that intersect the buffers. Inverting this selection will highlight the apartment buildings that are NOT within a 1km from a public library, 144 in total."),Bn=s(),ot=o("img"),this.h()},l(_){const O=Tc("svelte-1xs4wlw",document.head);oe=r(O,"LINK",{rel:!0,href:!0}),ce=r(O,"LINK",{rel:!0,href:!0,crossorigin:!0}),we=r(O,"LINK",{href:!0,rel:!0}),_e=r(O,"LINK",{href:!0,rel:!0}),Ee=r(O,"META",{name:!0,content:!0}),Ie=r(O,"META",{name:!0,content:!0}),Se=r(O,"META",{name:!0,content:!0}),O.forEach(i),lo=n(_),kc(pe.$$.fragment,_),so=n(_),w=r(_,"MAIN",{});var G=l(w);M=r(G,"DIV",{id:!0});var he=l(M);dt=r(he,"H1",{});var nh=l(dt);bo=a(nh,"(Q)GIS WORKSHOP"),nh.forEach(i),wo=n(he),ct=r(he,"P",{});var hh=l(ct);_o=a(hh,"For MUI2000"),hh.forEach(i),Eo=n(he),pt=r(he,"P",{});var dh=l(pt);Io=a(dh,"By Jeff Allen"),dh.forEach(i),So=n(he),ft=r(he,"P",{});var ch=l(ft);To=a(ch,"On January 23 & 30, 2023"),ch.forEach(i),he.forEach(i),ko=n(G),S=r(G,"DIV",{id:!0});var U=l(S);ut=r(U,"P",{});var ph=l(ut);Go=a(ph,"We use Geographic Information Systems (GIS) to analyze, manipulate, and visualize spatial information on a computer."),ph.forEach(i),Po=n(U),gt=r(U,"P",{});var fh=l(gt);Lo=a(fh,"Why is GIS useful?"),fh.forEach(i),Co=n(U),T=r(U,"UL",{class:!0});var Q=l(T);mt=r(Q,"LI",{});var uh=l(mt);Ao=a(uh,"visualize spatial data"),uh.forEach(i),Ro=n(Q),vt=r(Q,"LI",{});var gh=l(vt);Do=a(gh,"explore spatial patterns and relationships"),gh.forEach(i),Oo=n(Q),yt=r(Q,"LI",{});var mh=l(yt);Mo=a(mh,"make pretty and useful maps"),mh.forEach(i),zo=n(Q),bt=r(Q,"LI",{});var vh=l(bt);Wo=a(vh,'generate new data, either "by hand" or via spatial relationships from other data (e.g. through spatial queries)'),vh.forEach(i),qo=n(Q),wt=r(Q,"LI",{});var yh=l(wt);xo=a(yh,"perform spatial analysis (i.e. statistical methods applied to spatial data)"),yh.forEach(i),Q.forEach(i),jo=n(U),_t=r(U,"P",{});var bh=l(_t);Uo=a(bh,"GIS is often thought of as more than just a tool or piece of software. It can refer to all aspects of managing and analyzing digital spatially referenced data."),bh.forEach(i),Qo=n(U),fe=r(U,"P",{});var ho=l(fe);No=a(ho,"The following provides a brief overview of GIS followed by two short tutorials for getting started with GIS, using "),Te=r(ho,"A",{href:!0});var wh=l(Te);Bo=a(wh,"QGIS"),wh.forEach(i),Ho=a(ho,", a free and open source desktop GIS software. The first tutorial uses data from the City of Toronto's Open Data portal. The second analyzes demographic data from the Canadian census as well as public transit data for Toronto"),ho.forEach(i),U.forEach(i),Vo=n(G),d=r(G,"DIV",{id:!0});var p=l(d);Et=r(p,"H2",{});var _h=l(Et);Fo=a(_h,"Spatial Data"),_h.forEach(i),Jo=n(p),It=r(p,"P",{});var Eh=l(It);Yo=a(Eh,"A spatial dataset is a combination of..."),Eh.forEach(i),$o=n(p),re=r(p,"UL",{class:!0});var co=l(re);St=r(co,"LI",{});var Ih=l(St);Ko=a(Ih,"attribute data (the what)"),Ih.forEach(i),Xo=n(co),Tt=r(co,"LI",{});var Sh=l(Tt);Zo=a(Sh,"location data and spatial dimensions (the where)"),Sh.forEach(i),co.forEach(i),er=n(p),kt=r(p,"P",{});var Th=l(kt);tr=a(Th,"Spatial data, this combination of attribute and location data, can be organized and represented in a number of different formats."),Th.forEach(i),ar=n(p),Gt=r(p,"P",{});var kh=l(Gt);or=a(kh,"For example, a city can be represented on a map via a single point with a label (e.g. based on latitude and longitude coordinates). Or a city can be represented as a polygon, based on on it's administrative boundary"),kh.forEach(i),rr=n(p),Pt=r(p,"P",{});var Gh=l(Pt);ir=a(Gh,"Importantly, there are always uncertainty about the level of accuracy, precision, and resolution of spatial data. Spatial data are representations of reality, and thus have some loss of information when used for visualization and analysis. Any analysis can only be as good as the available data."),Gh.forEach(i),lr=n(p),Y=r(p,"P",{});var rt=l(Y);sr=a(rt,"The two most common forms of spatial data are "),Lt=r(rt,"B",{});var Ph=l(Lt);nr=a(Ph,"vector"),Ph.forEach(i),hr=a(rt," data and "),Ct=r(rt,"B",{});var Lh=l(Ct);dr=a(Lh,"raster"),Lh.forEach(i),cr=a(rt," data."),rt.forEach(i),pr=n(p),At=r(p,"H3",{});var Ch=l(At);fr=a(Ch,"Vector Data"),Ch.forEach(i),ur=n(p),Rt=r(p,"P",{});var Ah=l(Rt);gr=a(Ah,"Vector data uses geographic coordinates, or a series of coordinates, to create points, lines, and polygons representing real-world features."),Ah.forEach(i),mr=n(p),ue=r(p,"P",{});var po=l(ue);vr=a(po,"e.g. in the map below (a screenshot of "),ke=r(po,"A",{href:!0});var Rh=l(ke);yr=a(Rh,"OpenStreetMap"),Rh.forEach(i),br=a(po,") lines are used to represent roads and rail, points for retail, polygons for parks and buildings, etc."),po.forEach(i),wr=n(p),Ge=r(p,"IMG",{src:!0,alt:!0}),_r=n(p),ie=r(p,"P",{});var ro=l(ie);Pe=r(ro,"A",{href:!0});var Dh=l(Pe);Er=a(Dh,"GeoJSON"),Dh.forEach(i),Ir=a(ro," and the "),Le=r(ro,"A",{href:!0});var Oh=l(Le);Sr=a(Oh,"Shapefile"),Oh.forEach(i),Tr=a(ro," are probably the two most common vector data formats."),ro.forEach(i),kr=n(p),Dt=r(p,"H3",{});var Mh=l(Dt);Gr=a(Mh,"Raster Data"),Mh.forEach(i),Pr=n(p),Ot=r(p,"P",{});var zh=l(Ot);Lr=a(zh,"Raster data represents space as a continuous grid with equal cell sizes. Each cell contains a value pertaining to the type of feature it represents. These values can be quantitative (e.g. elevation) or categorical (e.g. type of land use). Common examples of raster data include digital elevation models (DEMs), satellite imagery, and scanned images (e.g. historical maps)."),zh.forEach(i),Cr=n(p),Mt=r(p,"P",{});var Wh=l(Mt);Ar=a(Wh,"e.g. the map below shows a DEM for Toronto at two different scales."),Wh.forEach(i),Rr=n(p),Ce=r(p,"IMG",{src:!0,alt:!0}),p.forEach(i),Dr=n(G),g=r(G,"DIV",{id:!0});var y=l(g);zt=r(y,"H2",{});var qh=l(zt);Or=a(qh,"GIS"),qh.forEach(i),Mr=n(y),Wt=r(y,"P",{});var xh=l(Wt);zr=a(xh,"The power of GIS software and tools is the ability to work with data stored in different layers (e.g. a layer for roads, another for buildings, and so on) in conjunction with each other. These layers can be visualized and analyzed relative to each other based on their spatial relationships."),xh.forEach(i),Wr=n(y),ge=r(y,"IMG",{width:!0,src:!0,alt:!0}),qr=n(y),qt=r(y,"P",{});var jh=l(qt);xr=a(jh,"GIS software usually links to data stored elsewhere on a computer, rather than in a project file. If the source location of the data (i.e. which folder it's in) changes, then this will have to be updated in the GIS project. If data are edited in GIS, it will update the data in its source location."),jh.forEach(i),jr=n(y),xt=r(y,"H3",{});var Uh=l(xt);Ur=a(Uh,"Common Tools & Software"),Uh.forEach(i),Qr=n(y),jt=r(y,"P",{});var Qh=l(jt);Nr=a(Qh,"Desktop GIS software"),Qh.forEach(i),Br=n(y),le=r(y,"UL",{class:!0});var fo=l(le);Ut=r(fo,"LI",{});var Nh=l(Ut);Hr=a(Nh,"QGIS (free and open source, can do most tasks, popular in tech and academia and non-profits)"),Nh.forEach(i),Vr=n(fo),Qt=r(fo,"LI",{});var Bh=l(Qt);Fr=a(Bh,"ArcGIS (proprietary, can do most tasks, used by big organizations)"),Bh.forEach(i),fo.forEach(i),Jr=n(y),Nt=r(y,"P",{});var Hh=l(Nt);Yr=a(Hh,"Web-based GIS and mapping"),Hh.forEach(i),$r=n(y),k=r(y,"UL",{class:!0});var N=l(k);Bt=r(N,"LI",{});var Vh=l(Bt);Kr=a(Vh,"MapBox (commercial, free basic accounts)"),Vh.forEach(i),Xr=n(N),Ht=r(N,"LI",{});var Fh=l(Ht);Zr=a(Fh,"CARTO (commercial)"),Fh.forEach(i),ei=n(N),Vt=r(N,"LI",{});var Jh=l(Vt);ti=a(Jh,"ArcGIS Online (commercial)"),Jh.forEach(i),ai=n(N),Ft=r(N,"LI",{});var Yh=l(Ft);oi=a(Yh,"D3 (free, steeper learning curve)"),Yh.forEach(i),ri=n(N),Jt=r(N,"LI",{});var $h=l(Jt);ii=a($h,"Observable (free, steeper learning curve)"),$h.forEach(i),N.forEach(i),li=n(y),Yt=r(y,"P",{});var Kh=l(Yt);si=a(Kh,"GIS & Spatial analysis using code"),Kh.forEach(i),ni=n(y),se=r(y,"UL",{class:!0});var uo=l(se);$t=r(uo,"LI",{});var Xh=l($t);hi=a(Xh,"Python, R (for processing data, statistical analysis, making simple maps)"),Xh.forEach(i),di=n(uo),Kt=r(uo,"LI",{});var Zh=l(Kt);ci=a(Zh,"PostGIS (spatial databases and queries)"),Zh.forEach(i),uo.forEach(i),pi=n(y),Xt=r(y,"P",{});var ed=l(Xt);fi=a(ed,"Many more!"),ed.forEach(i),y.forEach(i),ui=n(G),c=r(G,"DIV",{id:!0});var f=l(c);Zt=r(f,"H2",{});var td=l(Zt);gi=a(td,"Tutorial (1)"),td.forEach(i),mi=n(f),ea=r(f,"H3",{});var ad=l(ea);vi=a(ad,"Loading, Querying, and Visualizing Data"),ad.forEach(i),yi=n(f),ta=r(f,"P",{});var od=l(ta);bi=a(od,'First open up QGIS with a blank project. The top bars are various functions/tools. The "Browser" allows for navigating and loading datasets. The "Layers" panel will populate with each dataset that is added to the project. And the big blank square is where your map data will be visualized.'),od.forEach(i),wi=n(f),Ae=r(f,"IMG",{src:!0,alt:!0}),_i=n(f),aa=r(f,"P",{});var rd=l(aa);Ei=a(rd,"Let's begin by grabbing data from the City of Toronto's Open Data portal and loading it into QGIS. This is the data we'll be looking at:"),rd.forEach(i),Ii=n(f),x=r(f,"UL",{});var de=l(x);Re=r(de,"LI",{});var Hn=l(Re);De=r(Hn,"A",{href:!0});var id=l(De);Si=a(id,"Business Improvement Areas (BIA)"),id.forEach(i),Ti=a(Hn,"."),Hn.forEach(i),ki=n(de),Oe=r(de,"LI",{});var Vn=l(Oe);Me=r(Vn,"A",{href:!0});var ld=l(Me);Gi=a(ld,"Street Centrelines"),ld.forEach(i),Pi=a(Vn,"."),Vn.forEach(i),Li=n(de),z=r(de,"LI",{});var te=l(z);ze=r(te,"A",{href:!0});var sd=l(ze);Ci=a(sd,"Bike Share Stations"),sd.forEach(i),Ai=a(te,'. This data are a "live" '),oa=r(te,"CODE",{});var nd=l(oa);Ri=a(nd,"json"),nd.forEach(i),Di=a(te," feed, I've scraped it with this "),We=r(te,"A",{href:!0});var hd=l(We);Oi=a(hd,"script"),hd.forEach(i),Mi=a(te,", the result can be downloaded from "),qe=r(te,"A",{href:!0});var dd=l(qe);zi=a(dd,"here"),dd.forEach(i),Wi=a(te,"."),te.forEach(i),qi=n(de),xe=r(de,"LI",{});var Fn=l(xe);je=r(Fn,"A",{href:!0});var cd=l(je);xi=a(cd,"Aerial Imagery"),cd.forEach(i),ji=a(Fn,". We'll be adding the most recent imagery layer."),Fn.forEach(i),de.forEach(i),Ui=n(f),I=r(f,"P",{});var q=l(I);Qi=a(q,"Let's start by loading in the aerial imagery as a base layer. This is a raster dataset (each cell/pixel has a colour value) stored on the City's server. It can be loaded into QGIS by right-clicking on "),ra=r(q,"I",{});var pd=l(ra);Ni=a(pd,"WMS/WMTS"),pd.forEach(i),Bi=a(q," layer in the browser panel and adding a "),ia=r(q,"I",{});var fd=l(ia);Hi=a(fd,"New Connection"),fd.forEach(i),Vi=a(q," or by going to "),la=r(q,"I",{});var ud=l(la);Fi=a(ud,"Layer->Data Source Manager"),ud.forEach(i),Ji=a(q," and navigating to "),sa=r(q,"I",{});var gd=l(sa);Yi=a(gd,"WMS/WMTS"),gd.forEach(i),$i=a(q,". Once there, add in this URL "),na=r(q,"CODE",{});var md=l(na);Ki=a(md,"https://gis.toronto.ca/arcgis/rest/services/basemap/cot_ortho/MapServer/WMTS"),md.forEach(i),Xi=a(q," and provide a descriptive name for the layer."),q.forEach(i),Zi=n(f),$=r(f,"P",{});var it=l($);el=a(it,"Now let's add BIA and Centreline data. Download these from the links provided above. They can be added into QGIS either by dragging and dropping them from your file manager onto the map or layers panel. Or they can be added by "),ha=r(it,"I",{});var vd=l(ha);tl=a(vd,"Layer->Data Source Manager"),vd.forEach(i),al=a(it," and navigating to "),da=r(it,"I",{});var yd=l(da);ol=a(yd,'Vector"'),yd.forEach(i),rl=a(it,"."),it.forEach(i),il=n(f),ca=r(f,"P",{});var bd=l(ca);ll=a(bd,"Once added, your map should look something like this:"),bd.forEach(i),sl=n(f),Ue=r(f,"IMG",{src:!0,alt:!0}),nl=n(f),K=r(f,"P",{});var lt=l(K);hl=a(lt,"The layers can be toggled on and off. They can also be dragged into different orders, the top layer on the panel will always be the layer that is shown on top on the map. Right-clicking on the layer, going to "),pa=r(lt,"I",{});var wd=l(pa);dl=a(wd,"Properties"),wd.forEach(i),cl=a(lt,", then "),fa=r(lt,"I",{});var _d=l(fa);pl=a(_d,"Symbology"),_d.forEach(i),fl=a(lt,". In the image above, I changed the colours of the two vector layers, as well as the stroke-width of the Centreline layer."),lt.forEach(i),ul=n(f),W=r(f,"P",{});var ae=l(W);gl=a(ae,"Let's explore how we can select and filter data. We'll use the Centreline layer as an example. Right-clicking they layer allows us to view it's attribute table. There is a column in here called "),ua=r(ae,"CODE",{});var Ed=l(ua);ml=a(Ed,"FEATURE_00"),Ed.forEach(i),vl=a(ae," which indicates the type of feature. Right-click and open up the "),ga=r(ae,"I",{});var Id=l(ga);yl=a(Id,"Properties"),Id.forEach(i),bl=a(ae," of the layer, then click "),ma=r(ae,"I",{});var Sd=l(ma);wl=a(Sd,"Source"),Sd.forEach(i),_l=a(ae,", and play with filtering the data. e.g. this is a query for filtering to only show laneways "),va=r(ae,"CODE",{});var Td=l(va);El=a(Td,`"FEATURE_00" = 'Laneway'`),Td.forEach(i),ae.forEach(i),Il=n(f),L=r(f,"P",{});var B=l(L);Sl=a(B,"We can also visualize data based on values in the attribute table. In the CentreLine "),ya=r(B,"I",{});var kd=l(ya);Tl=a(kd,"Properties"),kd.forEach(i),kl=a(B,", go to "),ba=r(B,"I",{});var Gd=l(ba);Gl=a(Gd,"Symbology"),Gd.forEach(i),Pl=a(B,", then at the top, select "),wa=r(B,"I",{});var Pd=l(wa);Ll=a(Pd,"Categorized"),Pd.forEach(i),Cl=a(B,". Try selecting "),_a=r(B,"I",{});var Ld=l(_a);Al=a(Ld,"FEATURE_00"),Ld.forEach(i),Rl=a(B," again. We can now quickly visualize where different features are on the map! Each category can also be turned off and on in the layers panel as well."),B.forEach(i),Dl=n(f),Qe=r(f,"IMG",{src:!0,alt:!0}),Ol=n(f),C=r(f,"P",{});var H=l(C);Ml=a(H,"Now let's learn how to visualize data based on numeric data. We can use the bike share station data for this. Download and load this dataset into QGIS. Then go to it's "),Ea=r(H,"I",{});var Cd=l(Ea);zl=a(Cd,"Properties"),Cd.forEach(i),Wl=a(H,", "),Ia=r(H,"I",{});var Ad=l(Ia);ql=a(Ad,"Symbology"),Ad.forEach(i),xl=a(H,", then at the top, select "),Sa=r(H,"I",{});var Rd=l(Sa);jl=a(Rd,"Graduated"),Rd.forEach(i),Ul=a(H,". In this menu, we can color the points based on a numeric value in a column. Let's colour by the "),Ta=r(H,"CODE",{});var Dd=l(Ta);Ql=a(Dd,"capacity"),Dd.forEach(i),Nl=a(H," column. Notice the options available for classifying data (number of bins, whether to use quantiles or equal intervals, etc.). Different classification schemes can highlight or hide different spatial patterns."),H.forEach(i),Bl=n(f),Ne=r(f,"IMG",{src:!0,alt:!0}),f.forEach(i),Hl=n(G),m=r(G,"DIV",{id:!0});var b=l(m);ka=r(b,"H2",{});var Od=l(ka);Vl=a(Od,"Tutorial (2)"),Od.forEach(i),Fl=n(b),Ga=r(b,"H3",{});var Md=l(Ga);Jl=a(Md,"Table Joins and Choropleths"),Md.forEach(i),Yl=n(b),me=r(b,"P",{});var go=l(me);$l=a(go,"Start up a new QGIS project and add in the data downloaded from "),Be=r(go,"A",{href:!0});var zd=l(Be);Kl=a(zd,"here"),zd.forEach(i),Xl=a(go,"."),go.forEach(i),Zl=n(b),X=r(b,"P",{});var st=l(X);es=a(st,"First, let's look at data. We have a polygon layer which represents census tracts. These data are created by Statistics Canada to share aggregated for the Canadian census. They approximately correspond to neighbourhoods. Census tract boundary data were originally downloaded from "),He=r(st,"A",{href:!0});var Wd=l(He);ts=a(Wd,"here"),Wd.forEach(i),as=a(st,", while attribute data were downloaded from "),Ve=r(st,"A",{href:!0});var qd=l(Ve);os=a(qd,"here"),qd.forEach(i),rs=a(st,"."),st.forEach(i),is=n(b),ve=r(b,"P",{});var mo=l(ve);ls=a(mo,"We also have a line layer representing major transit lines in Toronto (originally sourced from Metrolinx). We can categorize line data by "),Pa=r(mo,"CODE",{});var xd=l(Pa);ss=a(xd,"status"),xd.forEach(i),ns=a(mo,", using different colours or line types to display whether the transit route is existing or under construction. The screenshot below shows the result. (Also note how the map has been rotated 17.7 degrees, to horizontally align some of the features and reduce empty white space)."),mo.forEach(i),hs=n(b),Fe=r(b,"IMG",{src:!0,alt:!0}),ds=n(b),E=r(b,"P",{});var P=l(E);cs=a(P,"Also included is a "),La=r(P,"CODE",{});var jd=l(La);ps=a(jd,".csv"),jd.forEach(i),fs=a(P," table which contains data linked to the unique identifier, "),Ca=r(P,"CODE",{});var Ud=l(Ca);us=a(Ud,"ctuid"),Ud.forEach(i),gs=a(P,", of each census tract. We can use the "),Aa=r(P,"CODE",{});var Qd=l(Aa);ms=a(Qd,"ctuid"),Qd.forEach(i),vs=a(P," to join this tabular data to the spatial boundaries of dissemination areas. Do so by, first adding the table as a layer into QGIS. Then open up the "),Ra=r(P,"I",{});var Nd=l(Ra);ys=a(Nd,"Properties"),Nd.forEach(i),bs=a(P," of the dissemination area boundary, and go to "),Da=r(P,"I",{});var Bd=l(Da);ws=a(Bd,"Joins"),Bd.forEach(i),_s=a(P,". Add a new join, using "),Oa=r(P,"CODE",{});var Hd=l(Oa);Es=a(Hd,"ctuid"),Hd.forEach(i),Is=a(P," as the source and target fields. Once complete, we can open up the attribute table and see these additional columns."),P.forEach(i),Ss=n(b),ye=r(b,"P",{});var vo=l(ye);Ts=a(vo,"We can now visualize these polygons as a "),Je=r(vo,"A",{href:!0});var Vd=l(Je);ks=a(Vd,"choropleth map"),Vd.forEach(i),Gs=a(vo," (maps where polygons are shaded by numeric attribute values). Similar to the previous tutorial, open up the layer properties, go to symbology, and style based on graduated symbols.  It's often preferred to visualize a choropleth as a rate or a density (in terms of people per area) in order not to exaggerate counts in larger areas."),vo.forEach(i),Ps=n(b),be=r(b,"P",{});var yo=l(be);Ls=a(yo,"(Note that a numeric column might be imported as a string. If this is the case, to convert to a number to visualize, click on the epsilon on the top-right, and use the "),Ma=r(yo,"CODE",{});var Fd=l(Ma);Cs=a(Fd,"to_real()"),Fd.forEach(i),As=a(yo," function to convert to a numeric value)."),yo.forEach(i),Rs=n(b),za=r(b,"P",{});var Jd=l(za);Ds=a(Jd,"For example, the following shows a choropleth map of the percent of people who live in low-income households by neighbourhood relative to major transit lines."),Jd.forEach(i),Os=n(b),Ye=r(b,"IMG",{src:!0,alt:!0}),Ms=n(b),Z=r(b,"P",{});var nt=l(Z);zs=a(nt,"This map was created by going to "),Wa=r(nt,"I",{});var Yd=l(Wa);Ws=a(Yd,"Project"),Yd.forEach(i),qs=a(nt,", selecting "),qa=r(nt,"I",{});var $d=l(qa);xs=a($d,"New Print Layout"),$d.forEach(i),js=a(nt,", and then adding in a map view, legend, and scale bar to the black page"),nt.forEach(i),b.forEach(i),Us=n(G),u=r(G,"DIV",{id:!0});var v=l(u);xa=r(v,"H2",{});var Kd=l(xa);Qs=a(Kd,"Tutorial (3)"),Kd.forEach(i),Ns=n(v),ja=r(v,"H3",{});var Xd=l(ja);Bs=a(Xd,"Geoprocessing"),Xd.forEach(i),Hs=n(v),Ua=r(v,"P",{});var Zd=l(Ua);Vs=a(Zd,"Next, we're going to learn a few commonly used geoprocessing tasks, using the following data:"),Zd.forEach(i),Fs=n(v),ee=r(v,"UL",{});var ht=l(ee);$e=r(ht,"LI",{});var Jn=l($e);Ke=r(Jn,"A",{href:!0});var ec=l(Ke);Js=a(ec,"Street Centrelines"),ec.forEach(i),Ys=a(Jn," (same as in tutorial 1)."),Jn.forEach(i),$s=n(ht),Xe=r(ht,"LI",{});var Yn=l(Xe);Ze=r(Yn,"A",{href:!0});var tc=l(Ze);Ks=a(tc,"Public Libraries"),tc.forEach(i),Xs=a(Yn,"."),Yn.forEach(i),Zs=n(ht),ne=r(ht,"LI",{});var io=l(ne);et=r(io,"A",{href:!0});var ac=l(et);en=a(ac,"Apartment Buildings"),ac.forEach(i),tn=a(io," (originally geocoded from the City's apartment building registration and evaluation data on "),tt=r(io,"A",{href:!0});var oc=l(tt);an=a(oc,"Open Data Toronto"),oc.forEach(i),on=a(io,")."),io.forEach(i),ht.forEach(i),rn=n(v),Qa=r(v,"H4",{});var rc=l(Qa);ln=a(rc,"Projections and re-projecting data"),rc.forEach(i),sn=n(v),Na=r(v,"P",{});var ic=l(Na);nn=a(ic,"All spatial data include location data, typically in the form of coordinates. A Coordinate Reference System (CRS) is a framework/schema for referencing where features are on the earth's surface. CRSs can have different units as well (e.g. degrees, metres, etc.). When working with urban data, we often want to have data in a CRS that does not distort shapes and has intuitive units (e.g. metres rather than degrees)."),ic.forEach(i),hn=n(v),A=r(v,"P",{});var V=l(A);dn=a(V,"To re-project and change the CRS of a vector layer, go to "),Ba=r(V,"I",{});var lc=l(Ba);cn=a(lc,"Vector"),lc.forEach(i),pn=a(V,", "),Ha=r(V,"I",{});var sc=l(Ha);fn=a(sc,"Data Management Tools"),sc.forEach(i),un=a(V,", then click "),Va=r(V,"I",{});var nc=l(Va);gn=a(nc,"Reproject Layer"),nc.forEach(i),mn=a(V,". Try converting the public libraries dataset into "),Fa=r(V,"CODE",{});var hc=l(Fa);vn=a(hc,"NAD83 / UTM zone 17N - EPSG:26917"),hc.forEach(i),yn=a(V,". This is a commonly used CRS for the Toronto region with units in metres."),V.forEach(i),bn=n(v),Ja=r(v,"H4",{});var dc=l(Ja);wn=a(dc,"Buffers"),dc.forEach(i),_n=n(v),R=r(v,"P",{});var F=l(R);En=a(F,"Using our reprojected layer, try creating 1km buffers around the location of public libraries. At the top of the QGIS menu, go to "),Ya=r(F,"I",{});var cc=l(Ya);In=a(cc,"Vector"),cc.forEach(i),Sn=a(F,", "),$a=r(F,"I",{});var pc=l($a);Tn=a(pc,"Geoprocessing Tools"),pc.forEach(i),kn=a(F,", then click "),Ka=r(F,"I",{});var fc=l(Ka);Gn=a(fc,"Buffer"),fc.forEach(i),Pn=a(F,". Select the public libraries as the input layer, and "),Xa=r(F,"CODE",{});var uc=l(Xa);Ln=a(uc,"1000"),uc.forEach(i),Cn=a(F," metres as the distance. We can quickly see where people have easy access to public libraries in the city."),F.forEach(i),An=n(v),at=r(v,"IMG",{src:!0,alt:!0}),Rn=n(v),Za=r(v,"H4",{});var gc=l(Za);Dn=a(gc,"Select by Location"),gc.forEach(i),On=n(v),D=r(v,"P",{});var J=l(D);Mn=a(J,"This can become more useful when we compare it to other layers. Let's try to find the public housing apartment buildings in Toronto that are not within 1km to a public library. We can do this first by filtering the apartment buildings dataset by their property type "),eo=r(J,"CODE",{});var mc=l(eo);zn=a(mc,`"A_PROPERTY_TYPE"='SOCIAL HOUSING' OR "A_PROPERTY_TYPE"='TCHC'`),mc.forEach(i),Wn=a(J,". Then go to "),to=r(J,"I",{});var vc=l(to);qn=a(vc,"Vector"),vc.forEach(i),xn=a(J,", "),ao=r(J,"I",{});var yc=l(ao);jn=a(yc,"Research Tools"),yc.forEach(i),Un=a(J,", then click "),oo=r(J,"I",{});var bc=l(oo);Qn=a(bc,"Select by Location"),bc.forEach(i),Nn=a(J,". Here we can select the apartments that intersect the buffers. Inverting this selection will highlight the apartment buildings that are NOT within a 1km from a public library, 144 in total."),J.forEach(i),Bn=n(v),ot=r(v,"IMG",{src:!0,alt:!0}),v.forEach(i),G.forEach(i),this.h()},h(){h(oe,"rel","preconnect"),h(oe,"href","https://fonts.googleapis.com"),h(ce,"rel","preconnect"),h(ce,"href","https://fonts.gstatic.com"),h(ce,"crossorigin",""),h(we,"href","https://fonts.googleapis.com/css2?family=Source+Serif+Pro:ital,wght@0,400;0,700;1,400;1,700&display=swap"),h(we,"rel","stylesheet"),h(_e,"href","https://fonts.googleapis.com/css2?family=Roboto&family=Source+Serif+Pro&display=swap"),h(_e,"rel","stylesheet"),h(Ee,"name","viewport"),h(Ee,"content","width=device-width, initial-scale=1, minimum-scale=1"),document.title="GIS Workshop / MUI2000",h(Ie,"name","description"),h(Ie,"content","GIS workshop for MUI2000"),h(Se,"name","author"),h(Se,"content","Jeff Allen"),h(M,"id","title"),h(T,"class","list"),h(Te,"href","https://www.qgis.org/en/site/"),h(S,"id","text"),h(re,"class","list"),h(ke,"href","https://www.openstreetmap.org/"),j(Ge.src,Kn=Dc)||h(Ge,"src",Kn),h(Ge,"alt","OpenStreetMap"),h(Pe,"href","https://en.wikipedia.org/wiki/GeoJSON"),h(Le,"href","https://en.wikipedia.org/wiki/Shapefile"),j(Ce.src,Xn=Oc)||h(Ce,"src",Xn),h(Ce,"alt","DEM Toronto"),h(d,"id","text"),h(ge,"width","350px"),j(ge.src,Zn=Mc)||h(ge,"src",Zn),h(ge,"alt","gis-layers"),h(le,"class","list"),h(k,"class","list"),h(se,"class","list"),h(g,"id","text"),j(Ae.src,eh=zc)||h(Ae,"src",eh),h(Ae,"alt","qgis-blank"),h(De,"href","https://open.toronto.ca/dataset/business-improvement-areas/"),h(Me,"href","https://open.toronto.ca/dataset/toronto-centreline-tcl/"),h(ze,"href","https://open.toronto.ca/dataset/bike-share-toronto/"),h(We,"href","https://github.com/schoolofcities/mapping-workshops-2023/blob/main/data/download-bike-share.py"),h(qe,"href","https://github.com/schoolofcities/mapping-workshops-2023/blob/main/data/bikeshare-stations.geojson"),h(je,"href","https://open.toronto.ca/dataset/web-map-services/"),j(Ue.src,th=Wc)||h(Ue,"src",th),h(Ue,"alt","qgis-layers1"),j(Qe.src,ah=qc)||h(Qe,"src",ah),h(Qe,"alt","qgis-centre"),j(Ne.src,oh=xc)||h(Ne,"src",oh),h(Ne,"alt","qgis-bikeshare"),h(c,"id","text"),h(Be,"href","https://github.com/schoolofcities/mapping-workshops-2023/raw/main/data/toronto.zip"),h(He,"href","https://www12.statcan.gc.ca/census-recensement/2021/geo/sip-pis/boundary-limites/index2021-eng.cfm?year=21"),h(Ve,"href","https://www12.statcan.gc.ca/census-recensement/2021/dp-pd/index-eng.cfm"),j(Fe.src,rh=jc)||h(Fe,"src",rh),h(Fe,"alt","qgis-railct"),h(Je,"href","https://en.wikipedia.org/wiki/Choropleth_map"),j(Ye.src,ih=Uc)||h(Ye,"src",ih),h(Ye,"alt","qgis-choropleth"),h(m,"id","text"),h(Ke,"href","https://open.toronto.ca/dataset/toronto-centreline-tcl/"),h(Ze,"href","https://open.toronto.ca/dataset/toronto-public-library-branch-locations/"),h(et,"href","https://github.com/schoolofcities/mapping-workshops-2023/raw/main/data/toronto-apartments.geojson"),h(tt,"href","https://open.toronto.ca/catalogue/?search=apartment%20buildings&sort=score%20desc"),j(at.src,lh=Qc)||h(at,"src",lh),h(at,"alt","qgis-buffer"),j(ot.src,sh=Nc)||h(ot,"src",sh),h(ot,"alt","qgis-bufferselect"),h(u,"id","text")},m(_,O){e(document.head,oe),e(document.head,ce),e(document.head,we),e(document.head,_e),e(document.head,Ee),e(document.head,Ie),e(document.head,Se),$n(_,lo,O),Gc(pe,_,O),$n(_,so,O),$n(_,w,O),e(w,M),e(M,dt),e(dt,bo),e(M,wo),e(M,ct),e(ct,_o),e(M,Eo),e(M,pt),e(pt,Io),e(M,So),e(M,ft),e(ft,To),e(w,ko),e(w,S),e(S,ut),e(ut,Go),e(S,Po),e(S,gt),e(gt,Lo),e(S,Co),e(S,T),e(T,mt),e(mt,Ao),e(T,Ro),e(T,vt),e(vt,Do),e(T,Oo),e(T,yt),e(yt,Mo),e(T,zo),e(T,bt),e(bt,Wo),e(T,qo),e(T,wt),e(wt,xo),e(S,jo),e(S,_t),e(_t,Uo),e(S,Qo),e(S,fe),e(fe,No),e(fe,Te),e(Te,Bo),e(fe,Ho),e(w,Vo),e(w,d),e(d,Et),e(Et,Fo),e(d,Jo),e(d,It),e(It,Yo),e(d,$o),e(d,re),e(re,St),e(St,Ko),e(re,Xo),e(re,Tt),e(Tt,Zo),e(d,er),e(d,kt),e(kt,tr),e(d,ar),e(d,Gt),e(Gt,or),e(d,rr),e(d,Pt),e(Pt,ir),e(d,lr),e(d,Y),e(Y,sr),e(Y,Lt),e(Lt,nr),e(Y,hr),e(Y,Ct),e(Ct,dr),e(Y,cr),e(d,pr),e(d,At),e(At,fr),e(d,ur),e(d,Rt),e(Rt,gr),e(d,mr),e(d,ue),e(ue,vr),e(ue,ke),e(ke,yr),e(ue,br),e(d,wr),e(d,Ge),e(d,_r),e(d,ie),e(ie,Pe),e(Pe,Er),e(ie,Ir),e(ie,Le),e(Le,Sr),e(ie,Tr),e(d,kr),e(d,Dt),e(Dt,Gr),e(d,Pr),e(d,Ot),e(Ot,Lr),e(d,Cr),e(d,Mt),e(Mt,Ar),e(d,Rr),e(d,Ce),e(w,Dr),e(w,g),e(g,zt),e(zt,Or),e(g,Mr),e(g,Wt),e(Wt,zr),e(g,Wr),e(g,ge),e(g,qr),e(g,qt),e(qt,xr),e(g,jr),e(g,xt),e(xt,Ur),e(g,Qr),e(g,jt),e(jt,Nr),e(g,Br),e(g,le),e(le,Ut),e(Ut,Hr),e(le,Vr),e(le,Qt),e(Qt,Fr),e(g,Jr),e(g,Nt),e(Nt,Yr),e(g,$r),e(g,k),e(k,Bt),e(Bt,Kr),e(k,Xr),e(k,Ht),e(Ht,Zr),e(k,ei),e(k,Vt),e(Vt,ti),e(k,ai),e(k,Ft),e(Ft,oi),e(k,ri),e(k,Jt),e(Jt,ii),e(g,li),e(g,Yt),e(Yt,si),e(g,ni),e(g,se),e(se,$t),e($t,hi),e(se,di),e(se,Kt),e(Kt,ci),e(g,pi),e(g,Xt),e(Xt,fi),e(w,ui),e(w,c),e(c,Zt),e(Zt,gi),e(c,mi),e(c,ea),e(ea,vi),e(c,yi),e(c,ta),e(ta,bi),e(c,wi),e(c,Ae),e(c,_i),e(c,aa),e(aa,Ei),e(c,Ii),e(c,x),e(x,Re),e(Re,De),e(De,Si),e(Re,Ti),e(x,ki),e(x,Oe),e(Oe,Me),e(Me,Gi),e(Oe,Pi),e(x,Li),e(x,z),e(z,ze),e(ze,Ci),e(z,Ai),e(z,oa),e(oa,Ri),e(z,Di),e(z,We),e(We,Oi),e(z,Mi),e(z,qe),e(qe,zi),e(z,Wi),e(x,qi),e(x,xe),e(xe,je),e(je,xi),e(xe,ji),e(c,Ui),e(c,I),e(I,Qi),e(I,ra),e(ra,Ni),e(I,Bi),e(I,ia),e(ia,Hi),e(I,Vi),e(I,la),e(la,Fi),e(I,Ji),e(I,sa),e(sa,Yi),e(I,$i),e(I,na),e(na,Ki),e(I,Xi),e(c,Zi),e(c,$),e($,el),e($,ha),e(ha,tl),e($,al),e($,da),e(da,ol),e($,rl),e(c,il),e(c,ca),e(ca,ll),e(c,sl),e(c,Ue),e(c,nl),e(c,K),e(K,hl),e(K,pa),e(pa,dl),e(K,cl),e(K,fa),e(fa,pl),e(K,fl),e(c,ul),e(c,W),e(W,gl),e(W,ua),e(ua,ml),e(W,vl),e(W,ga),e(ga,yl),e(W,bl),e(W,ma),e(ma,wl),e(W,_l),e(W,va),e(va,El),e(c,Il),e(c,L),e(L,Sl),e(L,ya),e(ya,Tl),e(L,kl),e(L,ba),e(ba,Gl),e(L,Pl),e(L,wa),e(wa,Ll),e(L,Cl),e(L,_a),e(_a,Al),e(L,Rl),e(c,Dl),e(c,Qe),e(c,Ol),e(c,C),e(C,Ml),e(C,Ea),e(Ea,zl),e(C,Wl),e(C,Ia),e(Ia,ql),e(C,xl),e(C,Sa),e(Sa,jl),e(C,Ul),e(C,Ta),e(Ta,Ql),e(C,Nl),e(c,Bl),e(c,Ne),e(w,Hl),e(w,m),e(m,ka),e(ka,Vl),e(m,Fl),e(m,Ga),e(Ga,Jl),e(m,Yl),e(m,me),e(me,$l),e(me,Be),e(Be,Kl),e(me,Xl),e(m,Zl),e(m,X),e(X,es),e(X,He),e(He,ts),e(X,as),e(X,Ve),e(Ve,os),e(X,rs),e(m,is),e(m,ve),e(ve,ls),e(ve,Pa),e(Pa,ss),e(ve,ns),e(m,hs),e(m,Fe),e(m,ds),e(m,E),e(E,cs),e(E,La),e(La,ps),e(E,fs),e(E,Ca),e(Ca,us),e(E,gs),e(E,Aa),e(Aa,ms),e(E,vs),e(E,Ra),e(Ra,ys),e(E,bs),e(E,Da),e(Da,ws),e(E,_s),e(E,Oa),e(Oa,Es),e(E,Is),e(m,Ss),e(m,ye),e(ye,Ts),e(ye,Je),e(Je,ks),e(ye,Gs),e(m,Ps),e(m,be),e(be,Ls),e(be,Ma),e(Ma,Cs),e(be,As),e(m,Rs),e(m,za),e(za,Ds),e(m,Os),e(m,Ye),e(m,Ms),e(m,Z),e(Z,zs),e(Z,Wa),e(Wa,Ws),e(Z,qs),e(Z,qa),e(qa,xs),e(Z,js),e(w,Us),e(w,u),e(u,xa),e(xa,Qs),e(u,Ns),e(u,ja),e(ja,Bs),e(u,Hs),e(u,Ua),e(Ua,Vs),e(u,Fs),e(u,ee),e(ee,$e),e($e,Ke),e(Ke,Js),e($e,Ys),e(ee,$s),e(ee,Xe),e(Xe,Ze),e(Ze,Ks),e(Xe,Xs),e(ee,Zs),e(ee,ne),e(ne,et),e(et,en),e(ne,tn),e(ne,tt),e(tt,an),e(ne,on),e(u,rn),e(u,Qa),e(Qa,ln),e(u,sn),e(u,Na),e(Na,nn),e(u,hn),e(u,A),e(A,dn),e(A,Ba),e(Ba,cn),e(A,pn),e(A,Ha),e(Ha,fn),e(A,un),e(A,Va),e(Va,gn),e(A,mn),e(A,Fa),e(Fa,vn),e(A,yn),e(u,bn),e(u,Ja),e(Ja,wn),e(u,_n),e(u,R),e(R,En),e(R,Ya),e(Ya,In),e(R,Sn),e(R,$a),e($a,Tn),e(R,kn),e(R,Ka),e(Ka,Gn),e(R,Pn),e(R,Xa),e(Xa,Ln),e(R,Cn),e(u,An),e(u,at),e(u,Rn),e(u,Za),e(Za,Dn),e(u,On),e(u,D),e(D,Mn),e(D,eo),e(eo,zn),e(D,Wn),e(D,to),e(to,qn),e(D,xn),e(D,ao),e(ao,jn),e(D,Un),e(D,oo),e(oo,Qn),e(D,Nn),e(u,Bn),e(u,ot),no=!0},p:Pc,i(_){no||(Lc(pe.$$.fragment,_),no=!0)},o(_){Cc(pe.$$.fragment,_),no=!1},d(_){i(oe),i(ce),i(we),i(_e),i(Ee),i(Ie),i(Se),_&&i(lo),Ac(pe,_),_&&i(so),_&&i(w)}}}class Jc extends _c{constructor(oe){super(),Ec(this,oe,null,Bc,Ic,{})}}export{Jc as default};
